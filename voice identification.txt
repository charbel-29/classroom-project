 

#!/usr/bin/env python3

 

import os

import sys

import itertools

import glob

import argparse

from scipy.io import wavfile

from utils import read_wav

from interface import ModelInterface

import matplotlib.pyplot as plt

import numpy as np

 

 

# redirect warnings to /dev/null

null = os.open('/dev/null', os.O_WRONLY)

os.dup2(null, 2)

 

def get_args():

    desc = "Speaker Recognition Command Line Tool"

    epilog = """

Examples:

    ./speaker-recognition.py -t enroll -i "/tmp/person* ./bob" -m model.out

    ./speaker-recognition.py -t predict -i "./*.wav" -m model.out

"""

    parser = argparse.ArgumentParser(description=desc,epilog=epilog,

                                    formatter_class=argparse.RawDescriptionHelpFormatter)

 

    parser.add_argument('-t', '--task',

                       help='Task to do. Either "enroll" or "predict"',

                       required=True)

 

    parser.add_argument('-i', '--input',

                       help='Input Files(to predict) or Directories(to enroll)',

                       required=True)

 

    parser.add_argument('-m', '--model',

                       help='Model file to save(in enroll) or use(in predict)',

                       required=True)

 

    ret = parser.parse_args()

    return ret

 

def task_enroll(input_dirs, output_model):

    m = ModelInterface()

    input_dirs = [os.path.expanduser(k) for k in input_dirs.strip().split()]

    dirs = itertools.chain(*(glob.glob(d) for d in input_dirs))

    dirs = [d for d in dirs if os.path.isdir(d)]

 

    files = []

    if len(dirs) == 0:

        print ("No valid directory found!")

        sys.exit(1)

 

    for d in dirs:

        label = os.path.basename(d.rstrip('/'))

        wavs = glob.glob(d + '/*.wav')

 

        if len(wavs) == 0:

            print ("No wav file found in %s"%(d))

            continue

        for wav in wavs:

            try:

                fs, signal = read_wav(wav)

                m.enroll(label, fs, signal)

                print("wav %s has been enrolled"%(wav))

            except Exception as e:

                print(wav + " error %s"%(e))

 

    m.train()

    m.dump(output_model)

 

def task_predict(input_files, input_model):

    m = ModelInterface.load(input_model)

    students = {}

    total_duration = 0

    for f in glob.glob(os.path.expanduser(input_files)):

        fs, signal = read_wav(f)

        label, score = m.predict(fs, signal)

        print (f, '->', label, ", score->", score)

        fps, data = wavfile.read(f)

        frames = data.size

        duration = frames / fps

        total_duration += duration

        if label not in students:

            students[label] = duration

        students[label] += duration

    names = list(students.keys())

    values = list(students.values())

    plt.xlabel("duration (s)")

    plt.title("Duration of Speech Detected Per Student")

    plt.barh(range(len(students)), values, tick_label=names)

    plt.savefig('./figure.png')

 

if __name__ == "__main__":

    global args

    args = get_args()

 

    task = args.task

    if task == 'enroll':

        task_enroll(args.input, args.model)

    elif task == 'predict':

        task_predict(args.input, args.model)